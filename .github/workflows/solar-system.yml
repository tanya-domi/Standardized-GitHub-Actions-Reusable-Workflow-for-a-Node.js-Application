name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

permissions:
  id-token: write 
  pull-requests: write
  statuses: write
  actions: read
  contents: read

env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  JFROG_CLI_LOG_LEVEL: DEBUG    

jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        strategy:
            matrix:
                nodejs_version: [18, 20]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Composite Action - Cache & Install NPM Packages
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules 

        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test

        - name: Archive Test Results
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result-${{ matrix.nodejs_version }}-${{ matrix.operating_system }}
            path: test-results.xml
            retention-days: 5

    code-coverage:
        name: Code Coverage
        container: 
            image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
                --name mongo
        env:
            MONGO_URI: 'mongodb://localhost:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: Composite Action - Cache & Install NPM Packages
          uses: ./.github/custom-actions/npm-action
          with:
            path-of-folder: node_modules

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    sonarqube:
      name: Code Quality Analysis
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest

      steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # better analysis history

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result-18-ubuntu-latest
          path: .

      - name: Download Coverage Report
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage/

      - name: Verify reports
        run: |
          ls -R .
          test -f coverage/lcov.info || echo "Coverage report missing!"
          test -f test-results.xml || echo "Test results missing!"

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectKey=solar-system
            -Dsonar.projectName=solar-system
            -Dsonar.sources=.
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**
            -Dsonar.junit.reportPaths=test-results.xml
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}


    publish-build:
      runs-on: ubuntu-latest
      needs: [unit-testing, code-coverage, sonarqube]
      continue-on-error: true
 
      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JFrog CLI OIDC
        uses:  jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:  
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
           
      - name: Setup Node npm
        uses: actions/setup-node@v4

      - name: Set CLI Config
        run: | 
          jf npm-config --global=true --repo-resolve=virtual-solar-system --repo-deploy=local-solar-system

      - name: Download Mocha Test Artifact
        uses: actions/download-artifact@v4
        with:
          name: Mocha-Test-Result-18-ubuntu-latest

      - name: Download Coverage Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-Result

      - name: Organize reports
        run: |
          mkdir -p reports/unit-tests reports/coverage
          mv test-results.xml reports/unit-tests/ || true
          mv cobertura-coverage.xml reports/coverage/ || true

      - name: Upload Test Results & Coverage to Artifactory
        run: |
          jf rt u "reports/unit-tests/*" "local-solar-system/unit-tests/" --build-name=solar-system --build-number=$GITHUB_RUN_NUMBER
          jf rt u "reports/coverage/*" "local-solar-system/coverage/" --build-name=solar-system --build-number=$GITHUB_RUN_NUMBER

      - name: Publish Build info With JFrog CLI
        run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish 


    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions: 
           packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ secrets.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
       

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/
      secrets: 
        CI_ROLE: ${{ secrets.CI_ROLE }} 
        mongodb-password: ${{ secrets.MONGO_PASSWORD}}

    # output-url:
    #   runs-on: ubuntu-latest
    #   needs: dev-deploy
    #   steps:
    #   - name: Output ALB Host URL
    #     run: |
    #      echo "The application URL is: ${{ needs.dev-deploy.outputs.alb_host_url }}"

  
    dev-integration-testing:
        if: contains(github.ref, 'feature/')
        name: Dev Integration Testing
        needs: dev-deploy
        runs-on: ubuntu-latest

        steps:
        - name: Test `/live` Endpoint
          env:
            INGRESS_HOST: solar-system-dev.dominicsheytanya.org  
          run: |
             echo "Testing endpoint: http://$INGRESS_HOST/live"

              for i in {1..10}; do
                if curl -sf http://$INGRESS_HOST/live; then
                  echo "Live endpoint is healthy"
                  exit 0
                fi
                echo " Waiting for /live endpoint..."
                sleep 10
              done
        
              echo "Failed to reach /live endpoint at http://$INGRESS_HOST/live"
              exit 1


    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml 
      secrets: 
        CI_ROLE: ${{ secrets.CI_ROLE }} 
        mongodb-password: ${{ secrets.MONGO_PASSWORD}}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: production
        k8s-manifest-dir: kubernetes/production/


      
    prod-integration-testing:
        name: Prod Integration Testing
        if: github.ref == 'refs/heads/main'
        needs: prod-deploy
        runs-on: ubuntu-latest
        steps:
           - name: Test `/live` Endpoint
             env:
               INGRESS_HOST: solar-system-dev.dominicsheytanya.org  
             run: |
                 echo "Testing endpoint: http://$INGRESS_HOST/live"

                  for i in {1..10}; do
                    if curl -sf http://$INGRESS_HOST/live; then
                      echo "Live endpoint is healthy"
                      exit 0
                   fi
                    echo " Waiting for /live endpoint..."
                    sleep 10
                  done
        
                  echo "Failed to reach /live endpoint at http://$INGRESS_HOST/live"
                  exit 1

    # slack-notification:
    #   if: always()
    #   name: Slack Notification
    #   needs: [dev-integration-testing, prod-integration-testing]
    #   continue-on-error: true
    #   runs-on: ubuntu-latest
    #   steps:
    #   - uses: actions/checkout@v4
    #   - name: Slack Notification
    #     uses: rtCamp/action-slack-notify@v2
    #     env:
    #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #       SLACK_CHANNEL: github-actions-chennels
    #       SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
    #     #  SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
    #       SLACK_MESSAGE: ':hammer_and_wrench: Triggered by ${{github.actor}}'
    #       SLACK_TITLE: Information
    ##
  #
